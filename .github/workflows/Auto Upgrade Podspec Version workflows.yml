name: "PUSH_Auto Upgrade Podspec Version"

on: 
  push:
    branches:
      - release/*
      - hotfix/*

jobs:
  upgrade_podspec:
    runs-on: ubuntu-latest
    steps:

    - name: 1. Checkout
      uses: actions/checkout@master
        
    - name: 2. Check if branch name is an `release/*` or `hotfix/*`
      id: check-branch
      run: |
          input_branch=${{ github.ref }}

          branch=$(echo ${input_branch} | sed -e "s/refs\/heads\///g")
          is_releasable_branch='NO'
          releasable_prefix_branchname=''
          releasable_prefix_branchname_v2=''

          # if contains release/
          if [ $(echo ${input_branch} | sed -e "s/release\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
              releasable_prefix_branchname_v2='released'
          elif [ $(echo ${input_branch} | sed -e "s/hotfix\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
              releasable_prefix_branchname_v2='hotfixed'
          fi;

          echo "::set-output name=branch::${branch}"
          echo "::set-output name=is_releasable_branch::${is_releasable_branch}" 
          echo "::set-output name=releasable_prefix_branchname_lowercase::${releasable_prefix_branchname}"
          echo "::set-output name=releasable_prefix_branchname_uppercase::${releasable_prefix_branchname^^}"
          echo "::set-output name=releasable_prefix_branchname_capitalize::${releasable_prefix_branchname^}"
          echo "::set-output name=releasable_prefix_branchname_v2_capitalize::${releasable_prefix_branchname_v2^}"

    - name: 3. Get release version number only
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: get-release-version
      run: |
          version=$(echo ${{ steps.check-branch.outputs.branch }} | sed -e "s/${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }}\///g")
          echo "::set-output name=new_release_version::${version}"
          echo "The detected release version = ${version}"

    # - name: 4. Create bot branch
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: create_bot_branch
    #   run: |
    #       bot_branch="bot/${{ steps.check-branch.outputs.branch }}"
    #       echo "::set-output name=bot_branch::${bot_branch}"
    #       git checkout -b ${bot_branch}
    
    # - name: 5.1 Find the current spec version string line
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: find_podspec_string
    #   uses: uynguyen-wonderlabs/str-replace@master
    #   with:
    #       find: "\\t*[s|spec].version\\s*=\\s*[\"|'][\\S]*[\"|']"
    #       include: ".podspec"

    # - name: 5.2. Debug logging info
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   run: |
    #       echo "fileFoundCount = ${{ steps.find_podspec_string.outputs.fileFoundCount }}"
    #       echo "resultArray = ${{ steps.find_podspec_string.outputs.resultArray }}"
    
    # - name: 5.3 Prepare for update podspec version in file
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: prepare_for_update
    #   run: |
    #       resultArray=${{steps.find_podspec_string.outputs.resultArray}}
    #       truncatedFirstLastBracketString=$(echo "${resultArray:1:-1}")
    #       echo "TEMP = ${truncatedFirstLastBracketString}"

    #       firstString=${truncatedFirstLastBracketString}
    #       secondString=${{steps.get-release-version.outputs.new_release_version}}
    #       new_string="${firstString/[0-9]*[\.]*[0-9]/$secondString}"

    #       echo "firstString = $firstString"
    #       echo "secondString = ${secondString}"
    #       echo "new_podspec_string = ${new_string}"

    #       echo "::set-output name=podspec_line_string::${new_string}"

    # - name: 5.4. Find and replace the current spec version to new version
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: find_and_replace
    #   uses: shitiomatic/str-replace@master
    #   with:
    #       find: "\\t*[s|spec].version\\s*=\\s*[\"|'][\\S]*[\"|']"
    #       replace: ${{ steps.prepare_for_update.outputs.podspec_line_string }}
    #       include: ".podspec"
    
    # - name: 6. Check result of Find and replace
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   run: |
    #       echo "Number of files which have been modified = ${{ steps.find_and_replace.outputs.modifiedFiles}}"
          
    - name: 7. Get the current change log file name
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_file
      run: |
          current_year=$(echo $(date +"%Y"))
          change_log_file_name="CHANGE-LOG-$current_year.md"
          echo "::set-output name=change_log_file_name::${change_log_file_name}"
 
    # - name: 8. Find and replace the title `[Unreleased]` of CHANGE-LOG-XXX.md file to `[Released] x.y.z` or `[Hotfixed] x.y.z`
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: find_and_replace_changelog
    #   uses: shitiomatic/str-replace@master
    #   with:
    #       find: "\\[Unreleased\\]"
    #       replace: "[${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}"
    #       include: "${{steps.get_changelog_file.outputs.change_log_file_name}}"

    # - name: 9. Check result of Find and replace
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   run: |
    #       echo "Number of files which have been modified = ${{ steps.find_and_replace_changelog.outputs.modifiedFiles}}"
           
    # - name: 10. Commit and Push changes
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   uses: dciborow/commit@master
    #   with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       push-branch: ${{ steps.create_bot_branch.outputs.bot_branch }}
    #       commit-message: "Upgrade podspec version to ${{ steps.get-release-version.outputs.new_release_version }}"
    #       force-add: 'true'
    #       force-push: 'true'
    #       name: "automate-bot"
    #       email: "automate-bot@sph.com.sg"

    # - name: 11. Create bot pull request
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: create_pr
    #   uses: thomaseizinger/create-pull-request@master
    #   with:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #       head: ${{ steps.create_bot_branch.outputs.bot_branch }}
    #       base: ${{ steps.check-branch.outputs.branch }}
    #       title: "[Bot] Upgrade podspec version to ${{ steps.get-release-version.outputs.new_release_version }}"

    # - name: 12. Auto approve `bot/release/*` or `bot/hotfix/*` branch
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   uses: juliangruber/approve-pull-request-action@v1
    #   with:
    #       github-token: ${{ secrets.NGUYENVANUYN96_WORKFLOW_SECRET }}
    #       number: "${{ steps.create_pr.outputs.number }}"

    # - name: 13. Merge approved PR
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   uses: sudo-bot/action-pull-request-merge@v1.1.1
    #   with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       number: ${{ steps.create_pr.outputs.number }}

    # - name: 14. Create pull request for release branch into master
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: create_release_pr
    #   uses: thomaseizinger/create-pull-request@master
    #   with:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #       head: ${{ steps.check-branch.outputs.branch }}
    #       base: "master"
    #       draft: "true"
    #       title: "[DO NOT MERGE] ${{ steps.check-branch.outputs.releasable_prefix_branchname_capitalize }} ${{ steps.get-release-version.outputs.new_release_version }}"
    #       body: |
    #           # Description
    #           <!--Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.-->
    #           Merge for ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} version ${{ steps.get-release-version.outputs.new_release_version }}
              
    #           ## Jira tickets
    #           <!--Please list your relevant jira tickets here.-->

    #           - NA

    #           ## Checklist
    #           <!--**Before submitting a pull request,** please make sure the following is done:-->

    #           - [ ] Ensure the test passes 
    #           - [ ] Rebase your branch on to `master` branch.

    #           ## What type of PR is this?
    #           <!--Please delete options that are not relevant.-->

    #           - [x] Bug fix (non-breaking change which fixes an issue)
    #           - [x] New feature (non-breaking change which adds functionality)
    #           - [x] Chore (Minor changes, refactor code, ...)
    #           - [x] Documentation Update

    #           ## Related libraries
    #           <!--Please list your related module PRs.-->

    #           - NA

    #           ## QA Instructions, Screenshots
    #           <!--_Please replace this line with instructions on how to test your changes, as well as any relevant images for UI changes._-->

    #           - NA

    - name: 15. Get unreleased change log from the CHANGE-LOG-XXX.md file
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_manually
      run: |
          filename=${{steps.get_changelog_file.outputs.change_log_file_name}}
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              if [ "$line" == "## [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  new_change_log+="$line";
                  can_appending="NO"
              elif [[ "$line" == *"## [Hotfixed] "* ]]; then
                  new_change_log+="$line";
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ]; then # && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;
          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          new_change_log="${new_change_log//'%'/'%25'}"
          new_change_log="${new_change_log//$'\n'/'%0A'}"
          new_change_log="${new_change_log//$'\r'/'%0D'}"

          echo "::set-output name=unreleased_change_log_with_last_title::${new_change_log}"

          new_change_log_line=$(echo "$new_change_log" | wc -l)
          echo "new_change_log_line = $new_change_log_line"
          temp=$(($new_change_log_line - 1))
          new_change_log="$(echo "$new_change_log" | sed "$temp d")"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          
          echo "============================================================"
          echo $new_change_log
    
    - name: 9.2. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "unreleased_change_log = ${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"

    - name: 10.1. Checkout `develop` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
      with:
          ref: "develop"

    - name: 10.2. Get `[Unreleased]` change log from `develop` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: get_develop_changelog
      run: |
          filename=${{steps.get_changelog_file.outputs.change_log_file_name}}
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              if [ "$line" == "## [Unreleased]" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  can_appending="NO"
              elif [[ "$line" == *"## [Hotfixed] "* ]]; then
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ] && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;
          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          new_change_log="${new_change_log//'%'/'%25'}"
          new_change_log="${new_change_log//$'\n'/'%0A'}"
          new_change_log="${new_change_log//$'\r'/'%0D'}"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          echo "============================================================"
          echo "$new_change_log"

    - name: 11. Checkout the `release/*` or `hotfix/*` branch 
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
      with:
          ref: ${{ steps.check-branch.outputs.branch }}

    - name: 12. Create bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: create_bot_branch
      run: |
          bot_branch="bot/develop/${{ steps.check-branch.outputs.branch }}"
          echo "::set-output name=bot_branch::${bot_branch}"
          git checkout -b ${bot_branch}

    - name: 13. Get the new change logs
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: get_new_changelogs
      run: |
          new_change_log="${{ steps.get_develop_changelog.outputs.unreleased_change_log }}"
          released_change_log="${{ steps.get_changelog_manually.outputs.unreleased_change_log_with_last_title }}"
          
          while read -r released_line
          do
              # reading each line
              unreleased_n=0

              while read -r unreleased_line
              do
                  # reading each line
                  unreleased_n=$((unreleased_n+1))

                  if [ "$unreleased_line" == "$released_line" ] && [[ $unreleased_line != "### "* ]]; then
                      new_change_log="$(echo "$new_change_log" | sed "$unreleased_n d")"
                      unreleased_n=$((unreleased_n-1))
                      break;
                  fi;
              done < <(printf '%s\n' "$new_change_log")
          done < <(printf '%s\n' "$released_change_log")

          final_changelog="## [Unreleased]"
          final_changelog+=$'\n';
          final_changelog+="${new_change_log}"
          final_changelog+=$'\n';
          final_changelog+=$'\n';
          final_changelog+="## [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}"
          final_changelog+=$'\n';
          final_changelog+="$released_change_log"
          final_changelog="${final_changelog//'%'/'%25'}"
          final_changelog="${final_changelog//$'\n'/'%0A'}"
          final_changelog="${final_changelog//$'\r'/'%0D'}"

          finding_changelog="## [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}"
          finding_changelog+=$'\n';
          finding_changelog+=$released_change_log
          finding_changelog="${finding_changelog//'%'/'%25'}"
          finding_changelog="${finding_changelog//$'\n'/'%0A'}"
          finding_changelog="${finding_changelog//$'\r'/'%0D'}"

          echo "::set-output name=final_changelog::${final_changelog}"
          echo "::set-output name=finding_changelog::${finding_changelog}"
          echo "${final_changelog}"
          echo "==========================================================="
          echo "${finding_changelog}"

    - name: 14. Update the content of CHANGE-LOG-XXX.md file to correct
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: find_and_replace_changelog_content
      uses: shitiomatic/str-replace@master
      with:
          find: "((?:\\#\\# \\[Released\\]|\\#\\# \\[Hotfixed\\]) ${{ steps.get-release-version.outputs.new_release_version }}[\\s\\S]*?)\\#\\# \\[Released\\]|\\#\\# \\[Hotfixed\\]"
          replace: "${{ steps.get_new_changelogs.outputs.final_changelog }}"
          include: "${{ steps.get_changelog_file.outputs.change_log_file_name }}"

    - name: 15.1. Check result of Find and replace
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      run: |
          echo "Number of files which have been modified = ${{ steps.find_and_replace_changelog_content.outputs.modifiedFiles}}"
          echo "==========================================================="
          echo $(cat ${{steps.get_changelog_file.outputs.change_log_file_name}})
           
    - name: 21. Notify to slack channel
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "TODO: Notify to slack channel"