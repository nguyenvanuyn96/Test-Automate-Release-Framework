name: Prepare For Auto Release App Tag
on: 
    workflow_dispatch:
        inputs:
            pr_number:
                description: 'The pr number that merged into master branch. Ex: 14'
                required: false
                default: ''
            source_branch:
                description: 'The releasing branch which was merged into master branch for release. Ex: release/1.0.5'
                required: false
                default: ''

    pull_request:
        branches: 
            - master
        types:
            - closed
jobs:
  prepare_for_auto_create_release_app_tag:
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.pr_number != '' || github.event.inputs.source_branch != '' }}
    runs-on: ubuntu-latest
    steps:
    - name: 1. Try to get pr number if have
      if: ${{ github.event.inputs.source_branch == '' }} 
      id: get-pr-number
      run: |
          pr_number=${{ github.event.pull_request.number }}

          if [ -z "$pr_number" ]; then # If this workflow is triggered by a workflow_dispatch
              pr_number=${{ github.event.inputs.pr_number }}
          fi;

          echo "::set-output name=pr_number::${pr_number}"

    - name: 2. Try to get branch name of PR if have
      if: ${{ steps.get-pr-number.outputs.pr_number != '' }} 
      uses: andrevalentin/get-branch-name-by-pr@master
      id: get_pr_info
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        pr-id: ${{ steps.get-pr-number.outputs.pr_number }}
        
    - name: 3.1. Print branch name for debugging
      if: ${{ steps.get_pr_info.outputs.branch != '' }} 
      run: |
        echo "This is PR from branch ${{ steps.get_pr_info.outputs.branch }}"
        
    - name: 3.2. Print branch name for debugging
      if: ${{ github.event.pull_request.number != '' }}
      run: |
        echo "This is PR into branch ${{ github.base_ref }}"
      
    - name: 3.3. Print branch name for debugging
      if: ${{ github.event.inputs.source_branch != '' }}
      run: |
        echo "This is PR from branch ${{ github.event.inputs.source_branch }}"
        echo "This is PR into branch master"
     
    - name: 4. Check if branch name is an `release/*` or `hotfix/*`
      id: check-branch
      run: |
          input_branch="${{ steps.get_pr_info.outputs.branch }}"

          if [ -z "$input_branch" ]; then
              input_branch="${{ github.event.inputs.source_branch }}"
          fi;

          branch="$(echo ${input_branch} | sed -e "s/^refs\/heads\///g")"
          is_releasable_branch='NO'
          releasable_prefix_branchname=''
          releasable_prefix_branchname_verb_ing=''
          releasable_prefix_branchname_v2=''
          platform='' # Empty means the next release is the universal app (both iPhone and iPad platform)

          branch="$(echo ${input_branch} | sed -e "s/^refs\/heads\///g")"
          is_releasable_branch='NO'
          releasable_prefix_branchname=''
          releasable_prefix_branchname_verb_ing=''
          releasable_prefix_branchname_v2=''

          # if contains release/
          if [ -z "$(echo ${branch} | sed -e "s/^release\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
              releasable_prefix_branchname_verb_ing='in releasing'
              releasable_prefix_branchname_v2='released'
          elif [ -z "$(echo ${branch} | sed -e "s/^release\/iphone\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
              releasable_prefix_branchname_verb_ing='in releasing'
              releasable_prefix_branchname_v2='released'
              platform='iPhone'
          elif [ -z "$(echo ${branch} | sed -e "s/^release\/ipad\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
              releasable_prefix_branchname_verb_ing='in releasing'
              releasable_prefix_branchname_v2='released'
              platform='iPad'
          elif [ -z "$(echo ${branch} | sed -e "s/^hotfix\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
              releasable_prefix_branchname_verb_ing='in hotfixing'
              releasable_prefix_branchname_v2='hotfixed'
          elif [ -z "$(echo ${branch} | sed -e "s/^hotfix\/iphone\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
              releasable_prefix_branchname_verb_ing='in hotfixing'
              releasable_prefix_branchname_v2='hotfixed'
              platform='iPhone'
          elif [ -z "$(echo ${branch} | sed -e "s/^hotfix\/ipad\/[0-9]*\.[0-9]*\.[0-9]*//g")" ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
              releasable_prefix_branchname_verb_ing='in hotfixing'
              releasable_prefix_branchname_v2='hotfixed'
              platform='iPad'
          fi;

          platform_have_spacing="${platform} "

          echo "::set-output name=branch::${branch}"
          echo "::set-output name=is_releasable_branch::${is_releasable_branch}"
          echo "::set-output name=platform::${platform}"
          echo "::set-output name=platform_have_spacing::${platform_have_spacing}" 
          echo "::set-output name=platform_lowercase::${platform,,}"
          echo "::set-output name=releasable_prefix_branchname_lowercase::${releasable_prefix_branchname}"
          echo "::set-output name=releasable_prefix_branchname_uppercase::${releasable_prefix_branchname^^}"
          echo "::set-output name=releasable_prefix_branchname_capitalize::${releasable_prefix_branchname^}"
          echo "::set-output name=releasable_prefix_branchname_verb_ing_capitalize::${releasable_prefix_branchname_verb_ing^}"
          echo "::set-output name=releasable_prefix_branchname_v2_capitalize::${releasable_prefix_branchname_v2^}"
    
    - name: 5. Checkout
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      uses: actions/checkout@master
      with:
          ref: "master"

    - name: 6. Find and get the current app version line string from project.pbxproj file
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: find_pbxproj_string
      run: |
          filename="ZaobaoUniversalApp.xcodeproj/project.pbxproj"
          branchName="${{ steps.check-branch.outputs.branch }}"

          iPhoneBranchNamePattern="release/iphone/.*"
          iPadBranchNamePattern="release/ipad/.*"

          iPhoneSectionPattern="\t*baseConfigurationReference = ((?!iPad).)*\.xcconfig.*"
          iPadSectionPattern="\t*baseConfigurationReference = .*iPad.*\.xcconfig.*"
          universalSectionPattern="\t*baseConfigurationReference = .*\.xcconfig.*"

          sectionPattern=$universalSectionPattern

          if [[ $branchName =~ $iPadBranchNamePattern ]]; then
              sectionPattern=$iPadSectionPattern
          elif [[ $branchName =~ $iPhoneBranchNamePattern ]]; then
              sectionPattern=$iPhoneSectionPattern
          fi;

          echo "sectionPattern = $sectionPattern"

          lineNumber=0
          in_section_check="NO"
          in_reference_check="NO"
          in_buildsetting_check="NO"

          currentProjectVersionPattern="\t*CURRENT_PROJECT_VERSION = .*"
          marketingVersionPattern="\t*MARKETING_VERSION = .*"

          currentProjectVersionLine=""
          marketingVersionLine=""

          while read line; do
              # reading each line
              let "lineNumber += 1"
              
              if [ "$in_section_check" == "YES" ] || [ "$line" == "/* Begin XCBuildConfiguration section */" ]; then
                  in_section_check="YES"

                  if [ "$in_reference_check" == "NO" ]; then
                      if [[ "$line" =~ $sectionPattern ]]; then
                          in_reference_check="YES"

                          # echo "in_reference_check = $line"
                      fi;
                  elif [ "$line" == "buildSettings = {" ]; then
                      in_buildsetting_check="YES"
                  elif [ "$in_buildsetting_check" == "YES" ]; then
                      if [[ "$line" =~ $marketingVersionPattern ]]; then
                          marketingVersionLine=$line
                      elif [[ "$line" =~ $currentProjectVersionPattern ]]; then
                          currentProjectVersionLine=$line
                      elif [ "$line" == "};" ]; then
                          in_reference_check="NO"
                          in_buildsetting_check="NO"
                      fi;
                  fi;

                  if [ ! -z "$currentProjectVersionLine" ] && [ ! -z "$marketingVersionLine" ]; then
                      break;
                  elif [ "$line" == "/* End XCBuildConfiguration section */" ]; then
                      break;
                  fi;
              fi;
          done < $filename

          echo "::set-output name=currentProjectVersionLine::${currentProjectVersionLine}"
          echo "::set-output name=marketingVersionLine::${marketingVersionLine}"

    - name: 7.1. Get the release version number from project.pbxproj file (step 6's result)
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get-release-version
      run: |
        marketingVersionLine=${{steps.find_pbxproj_string.outputs.marketingVersionLine}}
        version=$(echo ${marketingVersionLine} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

        currentProjectVersionLine=${{steps.find_pbxproj_string.outputs.currentProjectVersionLine}}
        build_number=$(echo ${currentProjectVersionLine} | grep -Eo '[0-9]+')

        echo "::set-output name=new_release_version::${version}"
        echo "::set-output name=new_release_build_number::${build_number}"
        
        echo "This is the version which is detected from release branch name: ${version}"
        echo "This is the bundle number which is detected from release branch name: ${build_number}"
        
    - name: 7.2. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "The branch ${{ steps.check-branch.outputs.branch }} is used for checking"
        echo "This branch has is_releasable_branch = ${{ steps.check-branch.outputs.is_releasable_branch }}"
        echo "This branch has release_version = ${{ steps.get-release-version.outputs.new_release_version }}"
        echo "This branch has release_build_number = ${{ steps.get-release-version.outputs.new_release_build_number }}"

    - name: 8. Checkout release branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      uses: actions/checkout@master
      with:
          ref: "${{ steps.check-branch.outputs.branch }}"

    - name: 9. Create release bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: create_bot_release_branch
      run: |
          bot_branch="bot/${{ steps.check-branch.outputs.branch }}"
          echo "::set-output name=bot_branch::${bot_branch}"
          git checkout -b ${bot_branch}
    
    - name: 10. Get the current change log file name
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_file
      run: |
          current_year=$(echo $(date +"%Y"))
          change_log_file_name="CHANGE-LOG-$current_year.md"
          echo "::set-output name=change_log_file_name::${change_log_file_name}"
    
    - name: 11. Get the current datetime for update changelog heading 2 title
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_current_datetime
      run: |
          current_datetime=$(echo $(date '+%d-%m-%Y'))
          echo "::set-output name=current_datetime::${current_datetime}"

    - name: 12. Find and replace the title `[Releasing] x.y.z` or `[Hotfixing] x.y.z` of CHANGE-LOG-YYYY.md file to `[Released] x.y.z (dd-mm-YYYY)` or `[Hotfixed] x.y.z (dd-mm-YYYY)`
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: find_and_replace_changelog
      uses: nguyenvanuyn96/str-find-and-replace-action@master
      with:
          find: "\\[${{ steps.check-branch.outputs.releasable_prefix_branchname_verb_ing_capitalize }}\\] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }}"
          replace: "[${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }} (${{ steps.get_current_datetime.outputs.current_datetime }})"
          include: "${{ steps.get_changelog_file.outputs.change_log_file_name }}"

    - name: 13. Check result of Find and replace
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: check_changelog_file
      run: |
          echo "Number of files which have been modified = ${{ steps.find_and_replace_changelog.outputs.modifiedFiles }}"
          
          is_updated='NO'
          if [ ${{ steps.find_and_replace_changelog.outputs.modifiedFiles }} == 0 ]; then
              is_updated='YES'
          fi;
          echo "is_updated = $is_updated"
          echo "::set-output name=is_updated::${is_updated}"
   
###### SCENARINO 1: NEED TO UPDATE THE CHANGELOG-YYYY.md first ##########################################################################

    - name: SCENARINO 1.11. Commit and Push changes
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: dciborow/commit@master
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: ${{ steps.create_bot_release_branch.outputs.bot_branch }}
          commit-message: "Update changelog title '[${{ steps.check-branch.outputs.releasable_prefix_branchname_verb_ing_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }}' to '[${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }} (${{ steps.get_current_datetime.outputs.current_datetime }})''"
          force-add: 'true'
          force-push: 'true'
          name: "automate-bot"
          email: "automate-bot@sph.com.sg"

    - name: SCENARINO 1.12. Create bot pull request
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      id: create_bot_release_pr
      uses: thomaseizinger/create-pull-request@master
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.create_bot_release_branch.outputs.bot_branch }}
          base: ${{ steps.check-branch.outputs.branch }}
          title: "[Bot] Update changelog heading title to [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }} (${{ steps.get_current_datetime.outputs.current_datetime }})"

    - name: SCENARINO 1.13. Auto approve `bot/release/*` or `bot/hotfix/*` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: juliangruber/approve-pull-request-action@v1
      with:
          github-token: ${{ secrets.AUTO_APPROVE_WORKFLOW_SECRET }}
          number: "${{ steps.create_bot_release_pr.outputs.number }}"

    - name: SCENARINO 1.14. Get latest commit hash of the bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      id: get_bot_release_commit
      run: |
          commit_hash=$(git log --format="%H" -n 1)

          echo "::set-output name=commit_hash::${commit_hash}"

    - name: SCENARINO 1.15.1. Set commit status to success # Need to set commit status to `success` because the release/* or hotfix/* is require a status check of `pr_eligibility_check` workflow
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: Sibz/github-status-action@v1
      with: 
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'pr_eligibility_check'
          description: "Passed"
          state: "success"
          sha: ${{ steps.get_bot_release_commit.outputs.commit_hash }}

    - name: SCENARINO 1.15.2. Set commit status to success # Need to set commit status to `success` because the release/* or hotfix/* is require a status check of `ci/bitrise/fef78e11a0d4722f/pr` workflow
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: Sibz/github-status-action@v1
      with: 
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'ci/bitrise/fef78e11a0d4722f/pr'
          description: "Passed"
          state: "success"
          sha: ${{ steps.get_bot_release_commit.outputs.commit_hash }}

    - name: SCENARINO 1.16. Merge approved PR
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: sudo-bot/action-pull-request-merge@v1.1.1
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create_bot_release_pr.outputs.number }}

    - name: SCENARINO 1.17. Checkout release branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      uses: actions/checkout@master
      with:
          ref: "${{ steps.check-branch.outputs.branch }}"

    - name: SCENARINO 1.18. Create release_master bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: create_bot_release_master_branch
      run: |
          bot_branch="bot/${{ steps.check-branch.outputs.branch }}/master"
          echo "::set-output name=bot_branch::${bot_branch}"
          git checkout -b ${bot_branch}

    - name: SCENARINO 1.19. Commit and Push changes
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: dciborow/commit@master
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: ${{ steps.create_bot_release_master_branch.outputs.bot_branch }}
          commit-message: "Update changelog title '[${{ steps.check-branch.outputs.releasable_prefix_branchname_verb_ing_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }}' to '[${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }} (${{ steps.get_current_datetime.outputs.current_datetime }})''"
          force-add: 'true'
          force-push: 'true'
          name: "automate-bot"
          email: "automate-bot@sph.com.sg"

    - name: SCENARINO 1.20. Create pull request
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      id: create_updated_release_pr
      uses: thomaseizinger/create-pull-request@master
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.create_bot_release_master_branch.outputs.bot_branch }}
          base: master
          title: "[Bot] Update changelog heading title to [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.check-branch.outputs.platform_have_spacing}}${{ steps.get-release-version.outputs.new_release_version }} (${{ steps.get_current_datetime.outputs.current_datetime }})"

    - name: SCENARINO 1.21. Auto approve the updated `bot/release/*/master` or `bot/hotfix/*/master` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: juliangruber/approve-pull-request-action@v1
      with:
          github-token: ${{ secrets.AUTO_APPROVE_WORKFLOW_SECRET }}
          number: "${{ steps.create_updated_release_pr.outputs.number }}"

    - name: SCENARINO 1.22. Get latest commit hash of the updated `bot/release/*/master` or `bot/hotfix/*/master` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      id: get_updated_release_commit
      run: |
          commit_hash=$(git log --format="%H" -n 1)

          echo "::set-output name=commit_hash::${commit_hash}"

    - name: SCENARINO 1.23. Set commit status to success # Need to set commit status to `success` because the release/* or hotfix/* is require a status check of `pr_eligibility_check` workflow
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: Sibz/github-status-action@v1
      with: 
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'pr_eligibility_check'
          description: "Passed"
          state: "success"
          sha: ${{ steps.get_updated_release_commit.outputs.commit_hash }}

    - name: SCENARINO 1.24. Set commit status to success # Need to set commit status to `success` because the release/* or hotfix/* is require a status check of `ci/bitrise/fef78e11a0d4722f/pr` workflow
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: Sibz/github-status-action@v1
      with: 
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'ci/bitrise/fef78e11a0d4722f/pr'
          description: "Passed"
          state: "success"
          sha: ${{ steps.get_updated_release_commit.outputs.commit_hash }}

    - name: SCENARINO 1.25. Merge approved PR
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: sudo-bot/action-pull-request-merge@v1.1.1
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create_updated_release_pr.outputs.number }}

    - name: SCENARINO 1.26. Invoke Auto Release Tag workflow to process the create release tag
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'NO' }}
      uses: benc-uk/workflow-dispatch@v121
      with:
        workflow: Auto Release App Tag
        token: ${{ secrets.AUTO_APPROVE_WORKFLOW_SECRET }}
        inputs: '{ "pr_number": "${{ steps.create_updated_release_pr.outputs.number }}" }'


###### SCENARINO 2: Go to create release tag ##########################################################################

    - name: SCENARINO 2.11. Checkout
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' && steps.check_changelog_file.outputs.is_updated == 'YES' }}
      uses: benc-uk/workflow-dispatch@v121
      with:
        workflow: Auto Release App Tag
        token: ${{ secrets.AUTO_APPROVE_WORKFLOW_SECRET }}
        inputs: '{ "source_branch": "${{ steps.check-branch.outputs.branch }}" }'
