name: Auto Release Tag
on: 
  pull_request:
    branches: 
      - master
    types:
      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Get branch name of PR
      uses: andrevalentin/get-branch-name-by-pr@master
      id: pr_data
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        pr-id: ${{ github.event.pull_request.number }}
        
    - name: 2. Print branch name for debugging
      run: |
        echo "This is PR from branch ${{ steps.pr_data.outputs.branch }}"
    
    - name: 3. Check if branch name is an `release/*` or `hotfix/*`
      id: check-branch
      run: |
          input_branch="${{ steps.pr_data.outputs.branch }}"

          branch=$(echo ${input_branch} | sed -e "s/refs\/heads\///g")
          is_releasable_branch='NO'
          releasable_prefix_branchname=''

          # if contains release/
          if [ $(echo ${input_branch} | sed -e "s/release\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
          elif [ $(echo ${input_branch} | sed -e "s/hotfix\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
          fi;

          echo "::set-output name=branch::${branch}"
          echo "::set-output name=is_releasable_branch::${is_releasable_branch}" 
          echo "::set-output name=releasable_prefix_branchname_lowercase::${releasable_prefix_branchname}"
          echo "::set-output name=releasable_prefix_branchname_uppercase::${releasable_prefix_branchname^^}"
          echo "::set-output name=releasable_prefix_branchname_capitalize::${releasable_prefix_branchname^}"      
    
    - name: 4. Checkout
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
        
    - name: 5. Find the current pod version line string from podspec file
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: find_podspec_string
      uses: uynguyen-wonderlabs/str-replace@master
      with:
          find: "\\t*[s|spec].version\\s*=\\s*[\"|'][\\S]*[\"|']"
          include: ".podspec"

    - name: 6. Get the release version number from podspec file (step 5's result)
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get-version
      run: |
        resultArray=${{steps.find_podspec_string.outputs.resultArray}}
        truncatedFirstLastBracketString=$(echo "${resultArray:1:-1}")
        echo "truncatedFirstLastBracketString = ${truncatedFirstLastBracketString}"

        firstString=$truncatedFirstLastBracketString
        version=$(echo ${firstString} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

        echo "::set-output name=release_version::${version}"
        echo "This is the version which is detected from release branch name: ${version}"
        
    - name: 7. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "The branch ${{ steps.pr_data.outputs.branch }} is used for checking"
        echo "This branch has is_releasable_branch = ${{ steps.check-branch.outputs.is_releasable_branch }}"
        echo "This branch has release_version = ${{ steps.get-version.outputs.release_version }}"

    - name: 8. Get the current change log file name
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_file
      run: |
          current_year=$(echo $(date +"%Y"))
          change_log_file_name="CHANGE-LOG-$current_year.md"
          echo "::set-output name=change_log_file_name::${change_log_file_name}"

    - name: 9.1. Get unreleased change log from the CHANGE-LOG-XXX.md file
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_manually
      run: |
          filename=${{steps.get_changelog_file.outputs.change_log_file_name}}
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              n=$((n+1))

              echo "Line No $n"

              if [ "$line" == "## [${{ steps.check-branch.outputs.releasable_prefix_branchname_capitalize }}] ${{ steps.get-version.outputs.release_version }}" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  can_appending="NO"
              elif [[ "$line" == *"## [Hotfixed] "* ]]; then
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ] && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;
          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          new_change_log="${new_change_log//'%'/'%25'}"
          new_change_log="${new_change_log//$'\n'/'%0A'}"
          new_change_log="${new_change_log//$'\r'/'%0D'}"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          echo "============================================================"
          echo "$new_change_log"
    
    - name: 9.2. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "unreleased_change_log = ${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"

    - name: 10. Create Release tag
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ steps.get-version.outputs.release_version }}
          release_name: "${{ steps.check-branch.outputs.releasable_prefix_branchname_capitalize }} ${{ steps.get-version.outputs.release_version }}"
          commitish: master
          body: "${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"
          draft: false
          prerelease: false

    - name: 11. Create pull request to merge the `release/*` or `hotfix/*` into `develop`
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: create_pr_develop
      uses: thomaseizinger/create-pull-request@master
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.pr_data.outputs.branch }}
          base: develop
          title: "Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-version.outputs.release_version }} into develop"
          body: |
              # Description
              <!--Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.-->
              Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-version.outputs.release_version }} into develop
              
              ## Jira tickets
              <!--Please list your relevant jira tickets here.-->

              - NA

              ## Checklist
              <!--**Before submitting a pull request,** please make sure the following is done:-->

              - [ ] Ensure the test passes 
              - [ ] Rebase your branch on to `master` branch.

              ## What type of PR is this?
              <!--Please delete options that are not relevant.-->

              - [x] Bug fix (non-breaking change which fixes an issue)
              - [x] New feature (non-breaking change which adds functionality)
              - [x] Chore (Minor changes, refactor code, ...)
              - [x] Documentation Update

              ## Related libraries
              <!--Please list your related module PRs.-->

              - NA

              ## QA Instructions, Screenshots
              <!--_Please replace this line with instructions on how to test your changes, as well as any relevant images for UI changes._-->

              - NA

    - name: 12. Auto approve the `create_pr_develop`
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: juliangruber/approve-pull-request-action@v1
      with:
          github-token: ${{ secrets.NGUYENVANUYN96_WORKFLOW_SECRET }}
          number: "${{ steps.create_pr_develop.outputs.number }}"

    - name: 13. Merge approved PR
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: sudo-bot/action-pull-request-merge@v1.1.1
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create_pr_develop.outputs.number }}

    - name: 14. Notify to slack channel
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "TODO: Notify to slack channel"
