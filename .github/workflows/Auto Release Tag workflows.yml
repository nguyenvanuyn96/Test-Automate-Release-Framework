name: Auto Release Tag
on: 
  pull_request:
    branches: 
      - master
    types:
      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Get branch name of PR
      uses: andrevalentin/get-branch-name-by-pr@master
      id: pr_data
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        pr-id: ${{ github.event.pull_request.number }}
        
    - name: 1.1. Print branch name for debugging
      run: |
        echo "This is PR from branch ${{ steps.pr_data.outputs.branch }}"
    
    - name: 2. Check if branch name is an `release/*` or `hotfix/*`
      id: check-branch
      run: |
          input_branch="${{ steps.pr_data.outputs.branch }}"

          branch=$(echo ${input_branch} | sed -e "s/refs\/heads\///g")
          is_releasable_branch='NO'
          releasable_prefix_branchname=''
          releasable_prefix_branchname_v2=''

          # if contains release/
          if [ $(echo ${input_branch} | sed -e "s/release\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='release'
              releasable_prefix_branchname_v2='released'
          elif [ $(echo ${input_branch} | sed -e "s/hotfix\///g") != ${input_branch} ]; then
              is_releasable_branch='YES'
              releasable_prefix_branchname='hotfix'
              releasable_prefix_branchname_v2='hotfixed'
          fi;

          echo "::set-output name=branch::${branch}"
          echo "::set-output name=is_releasable_branch::${is_releasable_branch}" 
          echo "::set-output name=releasable_prefix_branchname_lowercase::${releasable_prefix_branchname}"
          echo "::set-output name=releasable_prefix_branchname_uppercase::${releasable_prefix_branchname^^}"
          echo "::set-output name=releasable_prefix_branchname_capitalize::${releasable_prefix_branchname^}"
          echo "::set-output name=releasable_prefix_branchname_v2_capitalize::${releasable_prefix_branchname_v2^}"
    
    - name: 3. Checkout
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
        
    - name: 4. Find and get the current pod version line string from podspec file
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: find_podspec_string
      uses: uynguyen-wonderlabs/str-replace@master
      with:
          find: "\\t*[s|spec].version\\s*=\\s*[\"|'][\\S]*[\"|']"
          include: ".podspec"

    - name: 5. Get the release version number from podspec file (step 5's result)
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get-release-version
      run: |
        resultArray=${{steps.find_podspec_string.outputs.resultArray}}
        truncatedFirstLastBracketString=$(echo "${resultArray:1:-1}")
        echo "truncatedFirstLastBracketString = ${truncatedFirstLastBracketString}"

        firstString=$truncatedFirstLastBracketString
        version=$(echo ${firstString} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

        echo "::set-output name=new_release_version::${version}"
        echo "This is the version which is detected from release branch name: ${version}"
        
    - name: 5.1. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "The branch ${{ steps.pr_data.outputs.branch }} is used for checking"
        echo "This branch has is_releasable_branch = ${{ steps.check-branch.outputs.is_releasable_branch }}"
        echo "This branch has release_version = ${{ steps.get-release-version.outputs.new_release_version }}"

    - name: 6. Get the current change log file name
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_file
      run: |
          current_year=$(echo $(date +"%Y"))
          change_log_file_name="CHANGE-LOG-$current_year.md"
          echo "::set-output name=change_log_file_name::${change_log_file_name}"

    - name: 7. Get unreleased change log from the CHANGE-LOG-XXX.md file
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: get_changelog_manually
      run: |
          filename=${{steps.get_changelog_file.outputs.change_log_file_name}}
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              if [ "$line" == "## [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  new_change_log+="## [Released]";
                  can_appending="NO"
              elif [[ "$line" == *"## [Hotfixed] "* ]]; then
                  new_change_log+="## [Hotfixed]";
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ]; then # && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;
          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          unreleased_change_log_with_last_title=$new_change_log

          unreleased_change_log_with_last_title="${unreleased_change_log_with_last_title//'%'/'%25'}"
          unreleased_change_log_with_last_title="${unreleased_change_log_with_last_title//$'\n'/'%0A'}"
          unreleased_change_log_with_last_title="${unreleased_change_log_with_last_title//$'\r'/'%0D'}"

          echo "::set-output name=unreleased_change_log_with_last_title::${unreleased_change_log_with_last_title}"

          new_change_log_line=$(echo "$new_change_log" | wc -l)
          echo "new_change_log_line = $new_change_log_line"
          new_change_log="$(echo "$new_change_log" | sed "$new_change_log_line d")"
          new_change_log="${new_change_log//'%'/'%25'}"
          new_change_log="${new_change_log//$'\n'/'%0A'}"
          new_change_log="${new_change_log//$'\r'/'%0D'}"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          
          echo "============================================================"
          echo $new_change_log
    
    - name: 7.1. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "unreleased_change_log = ${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"

    - name: 8. Create Release tag
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ steps.get-release-version.outputs.new_release_version }}
          release_name: "${{ steps.check-branch.outputs.releasable_prefix_branchname_capitalize }} ${{ steps.get-release-version.outputs.new_release_version }}"
          commitish: master
          body: "${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"
          draft: false
          prerelease: false
    
    - name: 8.1. Prepare slack message
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        echo "SLACK_MESSAGE="The framework version \\\`${{ steps.get-release-version.outputs.new_release_version }}\\\` has been created new tag. Click here <${{ steps.create_release.outputs.html_url }}|${{ steps.check-branch.outputs.releasable_prefix_branchname_capitalize }} ${{ steps.get-release-version.outputs.new_release_version }}>"" >> $GITHUB_ENV
        echo "SLACK_COLOR=green" >> $GITHUB_ENV #Can either be one of good (green), warning (yellow), danger (red), or any hex color code (eg. #439FE0)

    - name: 9. Checkout `develop` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
      with:
          ref: "develop"

    - name: 10. Get all `[Unreleased]` change logs from `develop` branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: get_develop_changelog
      run: |
          filename=${{steps.get_changelog_file.outputs.change_log_file_name}}
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              if [ "$line" == "## [Unreleased]" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  can_appending="NO"
              elif [[ "$line" == *"## [Hotfixed] "* ]]; then
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ] && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;
          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          new_change_log="${new_change_log//'%'/'%25'}"
          new_change_log="${new_change_log//$'\n'/'%0A'}"
          new_change_log="${new_change_log//$'\r'/'%0D'}"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          echo "============================================================"
          echo "$new_change_log"

    - name: 11. Checkout the `release/*` or `hotfix/*` branch 
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: actions/checkout@master
      with:
          ref: ${{ steps.check-branch.outputs.branch }}

    - name: 12. Create bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: create_bot_branch
      run: |
          bot_branch="bot/${{ steps.check-branch.outputs.branch }}/develop"
          echo "::set-output name=bot_branch::${bot_branch}"
          git checkout -b ${bot_branch}

    - name: 13. Process to get the new change logs
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: get_new_changelogs
      run: |
          new_change_log="${{ steps.get_develop_changelog.outputs.unreleased_change_log }}"
          released_change_log="${{ steps.get_changelog_manually.outputs.unreleased_change_log_with_last_title }}"
          
          while read -r released_line
          do
              # reading each line
              unreleased_n=0

              while read -r unreleased_line
              do
                  # reading each line
                  unreleased_n=$((unreleased_n+1))

                  if [ "$unreleased_line" == "$released_line" ] && [[ $unreleased_line != "### "* ]]; then
                      new_change_log="$(echo "$new_change_log" | sed "$unreleased_n d")"
                      unreleased_n=$((unreleased_n-1))
                      break;
                  fi;
              done < <(printf '%s\n' "$new_change_log")
          done < <(printf '%s\n' "$released_change_log")

          final_changelog="## [Unreleased]"
          final_changelog+=$'\n';
          final_changelog+="${new_change_log}"
          final_changelog+=$'\n';
          final_changelog+=$'\n';
          final_changelog+="## [${{ steps.check-branch.outputs.releasable_prefix_branchname_v2_capitalize }}] ${{ steps.get-release-version.outputs.new_release_version }}"
          final_changelog+=$'\n';
          final_changelog+="$released_change_log"
          final_changelog="${final_changelog//'%'/'%25'}"
          final_changelog="${final_changelog//$'\n'/'%0A'}"
          final_changelog="${final_changelog//$'\r'/'%0D'}"

          echo "::set-output name=final_changelog::${final_changelog}"
          echo ${final_changelog}

    - name: 14. Update the content of CHANGE-LOG-XXX.md file to correct
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: find_and_replace
      uses: shitiomatic/str-replace@master
      with:
          find: "((?:\\#\\# \\[Released\\]|\\#\\# \\[Hotfixed\\]) ${{ steps.get-release-version.outputs.new_release_version }}[\\s\\S]*?)\\#\\# \\[Released\\]|\\#\\# \\[Hotfixed\\]"
          replace: "${{ steps.get_new_changelogs.outputs.final_changelog }}"
          include: "${{ steps.get_changelog_file.outputs.change_log_file_name }}"

    - name: 14.1. Check result of Find and replace
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      run: |
          echo "Number of files which have been modified = ${{ steps.find_and_replace.outputs.modifiedFiles}}"
           
    - name: 15. Commit and Push changes
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: dciborow/commit@master
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: ${{ steps.create_bot_branch.outputs.bot_branch }}
          commit-message: "Update ${{steps.get_changelog_file.outputs.change_log_file_name}}"
          force-add: 'true'
          force-push: 'true'
          name: "automate-bot"
          email: "automate-bot@sph.com.sg"

    - name: 16. Create pull request
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      id: create_pr
      uses: thomaseizinger/create-pull-request@master
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.create_bot_branch.outputs.bot_branch }}
          base: develop
          title: "[Bot] Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-release-version.outputs.new_release_version }} into develop"
          body: |
              # Description
              <!--Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.-->
              Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-release-version.outputs.new_release_version }} into develop
              
              ## Jira tickets
              <!--Please list your relevant jira tickets here.-->

              - NA

              ## Checklist
              <!--**Before submitting a pull request,** please make sure the following is done:-->

              - [ ] Ensure the test passes 
              - [ ] Rebase your branch on to `develop` branch.

              ## What type of PR is this?
              <!--Please delete options that are not relevant.-->

              - [x] Bug fix (non-breaking change which fixes an issue)
              - [x] New feature (non-breaking change which adds functionality)
              - [x] Chore (Minor changes, refactor code, ...)
              - [x] Documentation Update

              ## Related libraries
              <!--Please list your related module PRs.-->

              - NA

              ## QA Instructions, Screenshots
              <!--_Please replace this line with instructions on how to test your changes, as well as any relevant images for UI changes._-->

              - NA

    - name: 17. Auto approve bot branch
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: juliangruber/approve-pull-request-action@v1
      with:
          github-token: ${{ secrets.NGUYENVANUYN96_WORKFLOW_SECRET }}
          number: "${{ steps.create_pr.outputs.number }}"

    - name: 18. Merge approved PR
      if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
      uses: sudo-bot/action-pull-request-merge@v1.1.1
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create_pr.outputs.number }}

    # - name: 20. Create pull request to merge the `release/*` or `hotfix/*` into `develop`
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   id: create_pr_develop
    #   uses: thomaseizinger/create-pull-request@master
    #   with:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #       head: ${{ steps.pr_data.outputs.branch }}
    #       base: develop
    #       title: "Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-release-version.outputs.new_release_version }} into develop"
    #       body: |
    #           # Description
    #           <!--Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.-->
    #           Merge ${{ steps.check-branch.outputs.releasable_prefix_branchname_lowercase }} ${{ steps.get-release-version.outputs.new_release_version }} into develop
              
    #           ## Jira tickets
    #           <!--Please list your relevant jira tickets here.-->

    #           - NA

    #           ## Checklist
    #           <!--**Before submitting a pull request,** please make sure the following is done:-->

    #           - [ ] Ensure the test passes 
    #           - [ ] Rebase your branch on to `master` branch.

    #           ## What type of PR is this?
    #           <!--Please delete options that are not relevant.-->

    #           - [x] Bug fix (non-breaking change which fixes an issue)
    #           - [x] New feature (non-breaking change which adds functionality)
    #           - [x] Chore (Minor changes, refactor code, ...)
    #           - [x] Documentation Update

    #           ## Related libraries
    #           <!--Please list your related module PRs.-->

    #           - NA

    #           ## QA Instructions, Screenshots
    #           <!--_Please replace this line with instructions on how to test your changes, as well as any relevant images for UI changes._-->

    #           - NA

    # - name: 21. Auto approve the `create_pr_develop`
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   uses: juliangruber/approve-pull-request-action@v1
    #   with:
    #       github-token: ${{ secrets.NGUYENVANUYN96_WORKFLOW_SECRET }}
    #       number: "${{ steps.create_pr_develop.outputs.number }}"

    # - name: 22. Merge approved PR
    #   if: ${{ steps.check-branch.outputs.is_releasable_branch =='YES' }}
    #   uses: sudo-bot/action-pull-request-merge@v1.1.1
    #   with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       number: ${{ steps.create_pr_develop.outputs.number }}

    - name: 19. Prepare slack message
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      run: |
        new_message="${{ env.SLACK_MESSAGE }}"
        new_message+="%0A"
        new_message+="Already create a PR for merging back \\\`${{steps.pr_data.outputs.branch}}\\\` into \\\`develop\\\`. Click to help review and merge it <https://github.com/${{github.repository}}/pull/${{ steps.create_pr.outputs.number }}|PR ${{ steps.create_pr.outputs.number }}>"

        echo "SLACK_MESSAGE=${new_message}" >> $GITHUB_ENV

        if [ -z "${{ env.SLACK_MESSAGE }}" ]; then
            echo "SLACK_COLOR=green" >> $GITHUB_ENV
        fi;

    - name: 19.1. Notify to slack channel
      if: ${{ steps.check-branch.outputs.is_releasable_branch == 'YES' }}
      uses: actions-ecosystem/action-slack-notifier@v1
      with:
        slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel: "G01D342CVQS" #This is the id of the private group `cp-pushing-ios`
        username: "GitHub Actions"
        color: "${{ env.SLACK_COLOR }}"
        verbose: true # optional
        message: "${{ env.SLACK_MESSAGE }}"