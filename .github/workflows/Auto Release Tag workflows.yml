name: Auto Release Tag
on: 
  pull_request:
    branches: 
      - master
    types:
      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Get branch name of PR
      uses: andrevalentin/get-branch-name-by-pr@master
      id: pr_data
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        pr-id: ${{ github.event.pull_request.number }}
        
    - name: 2. Print branch name for debugging
      run: |
        echo "This is PR from branch ${{ steps.pr_data.outputs.branch }}"
    
    - name: 3. Check if branch name is an `release/*`
      uses: uynguyen-wonderlabs/get-branch-name-github-action@master
      id: check-branch
      with:
        branch: ${{ steps.pr_data.outputs.branch }}

    - name: 4. Checkout
      if: ${{ steps.check-branch.outputs.is_release_branch =='YES' }}
      uses: actions/checkout@master
        
    - name: 5. Find the current pod version line string from podspec file
      if: ${{ steps.check-branch.outputs.is_release_branch =='YES' }}
      id: find_podspec_string
      uses: uynguyen-wonderlabs/str-replace@master
      with:
          find: "\\t*[s|spec].version\\s*=\\s*[\"|'][\\S]*[\"|']"
          include: ".podspec"

    - name: 6. Get release version from step 5's result
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      id: get-version
      run: |
        resultArray=${{steps.find_podspec_string.outputs.resultArray}}
        truncatedFirstLastBracketString=$(echo "${resultArray:1:-1}")
        echo "truncatedFirstLastBracketString = ${truncatedFirstLastBracketString}"

        firstString=$truncatedFirstLastBracketString
        version=$(echo ${firstString} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
        echo "::set-output name=release_version::${version}"
        echo "This is the version which is detected from release branch name: ${version}"
        
    - name: 7. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      run: |
        echo "The branch ${{ steps.pr_data.outputs.branch }} is used for checking"
        echo "This branch has is_release_branch = ${{ steps.check-branch.outputs.is_release_branch }}"
        echo "This branch has release_version = ${{ steps.get-version.outputs.release_version }}"
   
    - name: 8. Get change log
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      uses: scottbrenner/generate-changelog-action@master
      id: get_changelog
      env:
          REPO: ${{ github.repository }}

    - name: 8.1 Get change log manually
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      id: get_changelog_manually
      run: |
          filename='CHANGE-LOG-2020.md'
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              n=$((n+1))

              echo "Line No $n"

              if [ "$line" == "## [Unreleased]" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ] && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;

          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          echo "$new_change_log"
    
    - name: 8.1 Get change log manually
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      id: get_changelog_manually_1
      run: |
          filename='CHANGE-LOG-2020.md'
          n=0
          new_change_log=""
          can_appending="NO"
          while read line; do
              # reading each line
              n=$((n+1))

              echo "Line No $n"

              if [ "$line" == "## [Unreleased]" ]; then
                  can_appending="YES"
              elif [[ "$line" == *"## [Released] "* ]]; then
                  can_appending="NO"
              fi;

              if [ "$can_appending" == "YES" ] && [ ! -z "$line" ]; then 
                  new_change_log+="$line";
                  # new_change_log+=$'\n';
              fi;

              if [ "$can_appending" == "NO" ] && [ ! -z "$new_change_log" ]; then 
                  break;
              fi;

          done < $filename
          new_change_log="$(echo "$new_change_log" | sed "1 d")"
          echo "::set-output name=unreleased_change_log::${new_change_log}"
          echo "$new_change_log"
          
    - name: 8.2. Print data for debugging
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      run: |
        echo "unreleased_change_log = ${{ steps.get_changelog_manually.outputs.unreleased_change_log }}"
        echo "====================================================>>>>>>>>>>>>>>>>>>>>>"
        echo ${{ steps.get_changelog_manually.outputs.unreleased_change_log }}
        echo "====================================================>>>>>>>>>>>>>>>>>>>>>"
        echo "====================================================>>>>>>>>>>>>>>>>>>>>>"
        echo "====================================================>>>>>>>>>>>>>>>>>>>>>"
        echo "unreleased_change_log = ${{ steps.get_changelog_manually_1.outputs.unreleased_change_log }}"
        echo "====================================================>>>>>>>>>>>>>>>>>>>>>"
        echo ${{ steps.get_changelog_manually_1.outputs.unreleased_change_log }}

    - name: 9. Create Release tag
      if: ${{ steps.check-branch.outputs.is_release_branch == 'YES' }}
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ steps.get-version.outputs.release_version }}
          release_name: Release ${{ steps.get-version.outputs.release_version }}
          commitish: master
          body: "${{ steps.get_changelog_manually_1.outputs.unreleased_change_log }}"
          draft: false
          prerelease: false
