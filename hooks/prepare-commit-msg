#!/bin/sh

# ======================================================================================
# ====================================== STEP 1. =======================================
# ======================================================================================

# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

@PERL_PATH@ -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

case "$COMMIT_SOURCE,$SHA1" in
 ,|template,)
   @PERL_PATH@ -i.bak -pe '
      print "\n" . `git diff --cached --name-status -r`
	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
 *) ;;
esac

SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
if test -z "$COMMIT_SOURCE"
then
  @PERL_PATH@ -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
fi


# # ======================================================================================
# # ====================================== STEP 2. =======================================
# # ======================================================================================

# # Git Hook for JIRA_TASK_ID
# # Adds to the top of your commit message `JIRA_TASK_ID`, based on the prefix of the current branch `feature/AWG-562-add-linter`
# # Example: `Add SwiftLint -> `AWG-562 Add SwiftLint

# if [ -z "$BRANCHES_TO_SKIP" ]; then
#   BRANCHES_TO_SKIP=(master develop test)
# fi

# COMMIT_FILE=$1
# COMMIT_MSG=$(cat $1)
# CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
# JIRA_ID_REGEX="[A-Z0-9]{1,10}-?[A-Z0-9]+"
# JIRA_ID_IN_CURRENT_BRANCH_NAME=$(echo "$CURRENT_BRANCH" | grep -Eo "$JIRA_ID_REGEX")
# JIRA_ID_IN_COMMIT_MESSAGE=$(echo "$COMMIT_MSG" | grep -Eo "$JIRA_ID_REGEX")

# if [ ! -z "$JIRA_ID_IN_COMMIT_MESSAGE" ]; then
#   if [ "$JIRA_ID_IN_COMMIT_MESSAGE" != "$JIRA_ID_IN_CURRENT_BRANCH_NAME" ]; then
#     echo "Error, your commit message JIRA_TASK_ID='$JIRA_ID_IN_COMMIT_MESSAGE' is not equal to current branch JIRA_TASK_ID='$JIRA_ID_IN_CURRENT_BRANCH_NAME'"
#     exit 1
#   fi
# elif [ ! -z "$JIRA_ID_IN_CURRENT_BRANCH_NAME" ]; then
#   echo "$JIRA_ID_IN_CURRENT_BRANCH_NAME $COMMIT_MSG" > $COMMIT_FILE
#   echo "JIRA ID '$JIRA_ID_IN_CURRENT_BRANCH_NAME', matched in current branch name, prepended to commit message. (Use --no-verify to skip)"
# fi