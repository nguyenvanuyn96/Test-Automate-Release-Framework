#!/bin/sh


current_branch="$(git rev-parse --abbrev-ref HEAD)"
existed_in_remote=$(git ls-remote --heads origin ${current_branch})
is_need_check_branch_name="YES"

if [ -z "${existed_in_remote}" ]; then
    echo "The remote branch ${current_branch} is NOT exists"
    is_need_check_branch_name="YES"
else
    echo "Remote branch ${current_branch} exists"
    is_need_check_branch_name="NO"
fi;

if [ $is_need_check_branch_name == "YES" ]; then
    is_release_branch="NO"
    warning_branch_name_message=""

    # ======================================================================================
    # ====================================== STEP 1. =======================================
    # ======================================================================================

    # Check if the branch is release/* branch and it name is correct or not
    # if contains release/
    if [ $(echo ${current_branch} | sed -e "s/release\///g") != ${current_branch} ]; then
        is_release_branch="YES"
        current_version=$(echo $current_branch | sed -e "s/release\///g")
    elif [ $(echo ${current_branch} | sed -e "s/hotfix\///g") != ${current_branch} ]; then
        is_release_branch="YES"
        current_version=$(echo $current_branch | sed -e "s/hotfix\///g")
    fi;

    is_accept_branch=!is_release_branch

    if [ $is_release_branch == "YES" ]; then
        current_major=`echo $current_version | cut -d. -f1`
        current_minor=`echo $current_version | cut -d. -f2`
        current_revision=`echo $current_version | cut -d. -f3`

        most_recent_release_tag="$(git describe --tags $(git rev-list --tags --max-count=1))"
        most_recent_major=`echo $most_recent_release_tag | cut -d. -f1`
        most_recent_minor=`echo $most_recent_release_tag | cut -d. -f2`
        most_recent_revision=`echo $most_recent_release_tag | cut -d. -f3`
    
        prefer_next_major=`expr $most_recent_major + 1`
        prefer_next_minor=`expr $most_recent_minor + 1`
        prefer_next_revision=`expr $most_recent_revision + 1`
    
        # Logging for debug
        echo "[pre-push] Log: current_branch          = ${current_branch}"
        echo "[pre-push] Log: most_recent_release_tag = ${most_recent_release_tag}"
        echo "[pre-push] Log: prefer_new_release_tag  = $most_recent_major.$most_recent_minor.$prefer_next_revision"
    
        if [ $current_major == $most_recent_major ]; then
            if [ $current_minor == $most_recent_minor ]; then
                if [ $current_revision == $prefer_next_revision ]; then # Tăng đều
                    is_accept_branch="YES";
                    warning_branch_name_message="";
                # elif [ $current_revision > $prefer_next_revision ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 1.0.3
                #     is_accept_branch="YES";
                #     warning_branch_name_message="[WARNING] The next release version should be $current_major.$current_minor.$prefer_next_revision. Please update if needed."
                else
                    is_accept_branch="NO";
                    warning_branch_name_message="[ERROR] The next release version should be $current_major.$current_minor.$prefer_next_revision. Please correct the branch name first."
                fi;
            elif [ $current_minor == $prefer_next_minor ]; then # Tăng đều
                if [ $current_revision == 0 ]; then # Bắt đầu revision mới
                    is_accept_branch="YES";
                    warning_branch_name_message="";
                # elif [ $current_revision -ge 1 ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên vision mới là 1.1.3
                #     is_accept_branch="YES";
                #     warning_branch_name_message="[WARNING] The next release version should be $current_major.$current_minor.0. Please update if needed."
                else
                    is_accept_branch="NO";
                    warning_branch_name_message="[ERROR] The next release version should be $current_major.$current_minor.0. Please correct the branch name first."
                fi;
            # elif [ $current_minor > $prefer_next_minor ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 1.2.0
            #     if [ $current_revision -ge 0 ]; then # Bắt đầu revision mới hoặc nhảy cóc lên revision mới
            #         is_accept_branch="YES";
            #         warning_branch_name_message="[WARNING] The next release version should be $current_major.$prefer_next_minor.0. Please update if needed.";
            #     else
            #         is_accept_branch="NO";
            #         warning_branch_name_message="[ERROR] The next release version should be $current_major.$prefer_next_minor.0. Please correct the branch name first."
            #     fi;
            else
                is_accept_branch="NO";
                warning_branch_name_message="[ERROR] The next release version should be $current_major.$prefer_next_minor.0. Please correct the branch name first."
            fi;
        elif [ $current_major == $prefer_next_major ]; then # Tăng đều
            if [ $current_minor == 0 ]; then # Bắt đầu minor mới
                if [ $current_revision == 0 ]; then
                    is_accept_branch="YES"
                    warning_branch_name_message="";
                # elif [ $current_revision > 0 ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 2.0.1
                #     is_accept_branch="YES";
                #     warning_branch_name_message="[WARNING] The next release version should be $prefer_next_major.0.0. Please update if needed."
                else
                    is_accept_branch="NO";
                    warning_branch_name_message="[ERROR] The next release version should be $prefer_next_major.0.0. Please correct the branch name first."
                fi;
            # elif [ $current_minor > 0 ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 2.1.0
            #     if [ $current_revision -ge 0 ]; then # Bắt đầu revision mới hoặc nhảy cóc lên revision mới
            #         is_accept_branch="YES";
            #         warning_branch_name_message="[WARNING] The next release version should be  $prefer_next_major.0.0. Please update if needed.";
            #     else
            #         is_accept_branch="NO";
            #         warning_branch_name_message="[ERROR] The next release version should be  $prefer_next_major.0.0. Please correct the branch name first."
            #     fi;
            else
                is_accept_branch="NO";
                warning_branch_name_message="[ERROR] The next release version should be $prefer_next_major.0.0. Please correct the branch name first."
            fi;
        # elif [ $current_major > $prefer_next_major ]; then # Tăng nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 3.0.0
        #     if [ $current_minor -ge 0 ]; then # Bắt đầu minor mới hoặc nhảy cóc lên minor mới
        #         if [ $current_revision -ge 0 ]; then # Bắt đầu revision mới hoặc nhảy cóc. VD: từ 1.0.0 nhảy lên version mới là 2.0.1
        #             is_accept_branch="YES";
        #             warning_branch_name_message="[WARNING] The next release version should be $prefer_next_major.0.0. Please update if needed."
        #         else
        #             is_accept_branch="NO";
        #             warning_branch_name_message="[ERROR] The next release version should be $prefer_next_major.0.0. Please correct the branch name first."
        #         fi;
        #     else
        #         is_accept_branch="NO";
        #         warning_branch_name_message="[ERROR] The next release version should be $prefer_next_major.0.0. Please correct the branch name first."
        #     fi;
        else
            is_accept_branch="NO";
            warning_branch_name_message="[ERROR] The next release version should be $prefer_next_major.0.0. Please correct the branch name first."
        fi;
    fi;

    if [ -n "$warning_branch_name_message" ]; then 
        echo "$warning_branch_name_message"
    fi;

    if [ $is_accept_branch == "NO" ]; then
        echo "==> Can NOT accept the branch name $current_branch"
	    exit 1
    else
        echo "==> PASS the check release branch name rule."
    fi;

    # ======================================================================================
    # ====================================== STEP 2. =======================================
    # ======================================================================================

    # Check if the branch name is a feature/* or bugfix/* or hotfix/* or master or develop
    if [ $(echo ${current_branch} | sed -e "s/feature\///g") != ${current_branch} ]; then # if contains feature/
        echo "==> $current_branch MATCHED the branch name feature/* rule"
    elif [ $(echo ${current_branch} | sed -e "s/bugfix\///g") != ${current_branch} ]; then # if contains bugfix/
        echo "==> $current_branch MATCHED the branch name bugfix/* rule"
    elif [ $(echo ${current_branch} | sed -e "s/hotfix\///g") != ${current_branch} ]; then # if contains hotfix/
        echo "==> $current_branch MATCHED the branch name hotfix/* rule"
    elif [ "master" == "$current_branch" ]; then # if contains master
        echo "==> $current_branch MATCHED the branch name master"
    elif [ "develop" == "$current_branch" ]; then # if contains develop
        echo "==> $current_branch MATCHED the branch name develop"
    else
        echo "==> Your branch name does NOT match any rules: develop|master|feature/*|bugfix/*|hotfix/*|release/*"
	    exit 1
    fi;
fi;

exit 0

# # ======================================================================================
# # ====================================== STEP 3. =======================================
# # ======================================================================================

# # An example hook script to verify what is about to be pushed.  Called by "git
# # push" after it has checked the remote status, but before anything has been
# # pushed.  If this script exits with a non-zero status nothing will be pushed.
# #
# # This hook is called with the following parameters:
# #
# # $1 -- Name of the remote to which the push is being done
# # $2 -- URL to which the push is being done
# #
# # If pushing without using a named remote those arguments will be equal.
# #
# # Information about the commits which are being pushed is supplied as lines to
# # the standard input in the form:
# #
# #   <local ref> <local oid> <remote ref> <remote oid>
# #
# # This sample shows how to prevent push of commits where the log message starts
# # with "WIP" (work in progress).

# remote="$1"
# url="$2"

# zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

# echo "remote = ${remote}"
# echo "url = ${url}"

# while read local_ref local_oid remote_ref remote_oid
# do
# 	echo "local_ref = ${local_ref}"
# 	echo "local_oid = ${local_oid}"
# 	echo "remote_ref = ${remote_ref}"
# 	echo "remote_oid = ${remote_oid}"


# 	develop_branch="release/*"
# 	current_branch="$(git rev-parse --abbrev-ref HEAD)"
# 	most_recent_release_tag="$(git describe --tags $(git rev-list --tags --max-count=1))"


# 	echo "develop_branch = ${develop_branch}"
# 	echo "current_branch = ${current_branch}"
# 	echo "most_recent_release_tag = ${most_recent_release_tag}"

# 	exit 1

# 	if test "$local_oid" = "$zero"
# 	then
# 		# Handle delete
# 		:
# 	else
# 		if test "$remote_oid" = "$zero"
# 		then
# 			# New branch, examine all commits
# 			range="$local_oid"
# 		else
# 			# Update to existing branch, examine new commits
# 			range="$remote_oid..$local_oid"
# 		fi

# 		# Check for WIP commit
# 		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
# 		if test -n "$commit"
# 		then
# 			echo >&2 "Found WIP commit in $local_ref, not pushing"
# 			exit 1
# 		fi
# 	fi
# done


# # Check a commit into the develop|master set this to your active development branch
# develop_branch="release/*"
# current_branch="$(git rev-parse --abbrev-ref HEAD)"
# most_recent_release_tag="$(git describe --tags $(git rev-list --tags --max-count=1))"



# # ======================================================================================
# # ====================================== STEP 3. =======================================
# # ======================================================================================

# # Prevents force-pushing to master

# BRANCH=`git rev-parse --abbrev-ref HEAD`
# PUSH_COMMAND=`ps -ocommand= -p $PPID`
# PROTECTED_BRANCHES="^(master|develop|release/*|hotfix/*)"
# FORCE_PUSH="force|delete|-f"

# if [[ "$BRANCH" =~ $PROTECTED_BRANCHES && "$PUSH_COMMAND" =~ $FORCE_PUSH ]]; then
#   echo "Prevented force-push to protected branch \"$BRANCH\" by pre-push hook"
#   exit 1
# fi

# exit 0